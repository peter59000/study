

go get -u github.com/hyperledger/fabric/core/chaincode/shim

cd hyfa/fabric-samples/chaincode

sudo mkdir hello && cd hello

sudo vim hello.go


package main

import (
   "github.com/hyperledger/fabric/core/chaincode/shim"
   "github.com/hyperledger/fabric/protos/peer"
   "fmt"
)

func main()  {
   err := shim.Start(new(HelloChaincode))
   if err != nil {
      fmt.Printf("链码启动失败: %v", err)
   }
}

type HelloChaincode struct {
}

func (t *HelloChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response  {
   fmt.Println("开始实例化链码....")

   // 获取参数
   //args := stub.GetStringArgs()
   _, args := stub.GetFunctionAndParameters()
   // 判断参数长度是否为2个
   if len(args) != 2 {
      return shim.Error("指定了错误的参数个数")
   }

   fmt.Println("保存数据......")

   // 通过调用PutState方法将数据保存在账本中
   err := stub.PutState(args[0], []byte(args[1]))
   if err != nil {
      return shim.Error("保存数据时发生错误...")
   }

   fmt.Println("实例化链码成功")

   return shim.Success(nil)

}

func (t *HelloChaincode)  Invoke(stub shim.ChaincodeStubInterface) peer.Response  {
        // 获取调用链码时传递的参数内容(包括要调用的函数名及参数)
     fun, args := stub.GetFunctionAndParameters()

     // 客户意图
     if fun == "query"{
        return query(stub, args)
     }

          return shim.Error("非法操作, 指定功能不能实现")
 }



func query(stub shim.ChaincodeStubInterface, args []string) peer.Response {
   // 检查传递的参数个数是否为1
   if len(args) != 1{
      return shim.Error("指定的参数错误，必须且只能指定相应的Key")
   }

   // 根据指定的Key调用GetState方法查询数据
   result, err := stub.GetState(args[0])
   if err != nil {
      return shim.Error("根据指定的 " + args[0] + " 查询数据时发生错误")
   }
   if result == nil {
      return shim.Error("根据指定的 " + args[0] + " 没有查询到相应的数据")
   }

   // 返回查询结果
   return shim.Success(result)
}



cd ../chaincode-docker-devmode/

sudo docker exec -it chaincode bash

cd hello 
go build

CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=hellocc:0 ./hello

sudo docker exec -it cli bash

peer chaincode install -p chaincodedev/chaincode/hello -n hellocc -v 0

peer chaincode instantiate -n hellocc -v 0 -c '{"Args":["init", "Hello","World"]}' -C myc 

peer chaincode query -n hellocc  -c '{"Args":["query","Hello"]}' -C myc


cd ~/hyfa/fabric-samples/chaincode

sudo mkdir test && cd test

sudo vim test.go


package main

import (
   "github.com/hyperledger/fabric/core/chaincode/shim"
   "github.com/hyperledger/fabric/protos/peer"
   "fmt"
)

type SimpleChaincode struct {
}

func main(){
        err := shim.Start(new(SimpleChaincode))
        if err != nil{
                fmt.Printf("启动 SimpleChaincode 时发生错误: %s", err)
        }
}

func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response{
        args := stub.GetStringArgs()
        if len(args) != 2{
                return shim.Error("初始化的参数只能为2个， 分别代表名称与状态数据")
        }
        err := stub.PutState(args[0], []byte(args[1]))
        if err != nil{
                return shim.Error("在保存状态时出现错误")
        }
        return shim.Success(nil)
}


func (t * SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) 
peer.Response{
	fun, args := stub.GetFunctionAndParameters()

	var result string
	var err error
	if fun == "set"{
		result, err = set(stub, args)
	}else{
	result, err = get(stub, args)
	}
	if err != nil{
		return shim.Error(err.Error())
	}
	return shim.Success([]byte(result))

}


func set(stub shim.ChaincodeStubInterface, args []string)(string, error){

	if len(args) != 2{
		return "", fmt.Errorf("给定的参数个数不符合要求")
	}

	err := stub.PutState(args[0], []byte(args[1]))
	if err != nil{
		return "", fmt.Errorf(err.Error())
	}
	return string(args[0]), nil

}

func get(stub shim.ChaincodeStubInterface, args []string)(string, error){
 if len(args) != 1{
 	return "", fmt.Errorf("给定的参数个数不符合要求")
 }
 result, err := stub.GetState(args[0])
 if err != nil{
 	return "", fmt.Errorf("获取数据发生错误")
 }
 if result == nil{
 	return "", fmt.Errorf("根据 %s 没有获取到相应的数据", args[0])
 }
 return string(result), nil
      
}


cd ~/hyfa/fabric-samples/chaincode-docker-devmode/

sudo docker-compose -f docker-compose-simple.yaml up -d

sudo docker exec -it chaincode bash

cd test
go build

CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=test:0 ./test


sudo docker exec -it cli bash

peer chaincode install -p chaincodedev/chaincode/test -n test -v 0

peer chaincode instantiate -n test -v 0 -c '{"Args":["a","10"]}' -C myc 

peer chaincode invoke -n test -c '{"Args":["set", "a", "20"]}' -C myc

peer chaincode query -n test -c '{"Args":["query","a"]}' -C myc


cd ~/hyfa/fabric-samples/chaincode

sudo mkdir payment && cd payment


....................省略具体代码，书上和csdn上有

cd ~/hyfa/fabric-samples/chaincode-docker-devmode/

sudo docker-compose -f docker-compose-simple.yaml up -d

sudo docker exec -it chaincode bash

cd payment

CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=paycc:0 ./payment

sudo docker exec -it cli bash

peer chaincode install -p chaincodedev/chaincode/payment -n paycc -v 0

peer chaincode instantiate -n paycc -v 0 -c '{"Args":["init","aaa", "100", "bbb","200"]}' -C myc

peer chaincode invoke -n paycc -c '{"Args":["payment", "aaa","bbb","20"]}' -C myc

peer chaincode query -n paycc -c '{"Args":["find","aaa"]}' -C myc











